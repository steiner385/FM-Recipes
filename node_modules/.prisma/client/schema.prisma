generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions matching TypeScript enums
enum RecipeStatus {
  DRAFT
  PUBLISHED
  PRIVATE
  ARCHIVED
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

// User model (referenced by recipes, ratings)
model User {
  id            String         @id @default(cuid())
  familyId      String
  name          String
  recipes       Recipe[]
  recipeRatings RecipeRating[]
}

// Family model to group recipes
model Family {
  id      String   @id @default(cuid())
  name    String
  recipes Recipe[]
}

// Recipe model with comprehensive details
model Recipe {
  id          String           @id @default(cuid())
  title       String
  description String
  status      RecipeStatus     @default(DRAFT)
  difficulty  RecipeDifficulty @default(EASY)

  // Relationships
  userId   String
  familyId String
  user     User   @relation(fields: [userId], references: [id])
  family   Family @relation(fields: [familyId], references: [id])

  // Optional recipe details
  prepTime Int?
  cookTime Int?
  servings Int?

  // Related models
  ingredients  Ingredient[]
  instructions String[]
  ratings      RecipeRating[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([userId])
  @@index([familyId])
  @@index([status])
  @@index([difficulty])
  @@index([createdAt])
}

// Ingredient model for recipe ingredients
model Ingredient {
  id       String @id @default(cuid())
  recipeId String
  name     String
  quantity Float
  unit     String

  // Relationship
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

// RecipeRating model for user ratings
model RecipeRating {
  id       String  @id @default(cuid())
  recipeId String
  userId   String
  rating   Int
  comment  String?

  // Relationships
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  // Constraints
  @@unique([recipeId, userId])
  // Indexes for performance
  @@index([recipeId])
  @@index([userId])
  @@index([createdAt])
}
